{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMO9V4l0/XlHvvBYPYHa2To"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["1 Explain the key features of python that makes it a popular choice for programming\n"],"metadata":{"id":"D5tfro2L4Sl5"}},{"cell_type":"markdown","source":["1 Easy to learn\n","2 Open source\n","3 Large standerd library\n","4 Portable"],"metadata":{"id":"jU1d0b0lnTbW"}},{"cell_type":"markdown","source":["2 Describe the role of predifined keywords in python and provide examples of how they are used in a program"],"metadata":{"id":"2Y8727SD6Gnz"}},{"cell_type":"markdown","source":["Predifined keywords in python play a crucial role in the language's functionality allowing for clear and structured programming they are define control flow, data structure and interactions within the program, ensuring that developers can write efficient and readable code.\n","Common keywords and their role\n","\n","\n","1.   contol flow keywords,\n"," -if, elif,else: used for conditional statements.\n"," -for,while:used for looping.\n"," -break,continue,return:control the flow of loops and functions\n","\n","2.  Function and class defination keywords\n"," -def:used to define a function\n"," -class:used to define a class\n","\n","3. Exception handling keywords\n"," -try,except,finally:used for exception handling\n","\n","4.  Data type and memory management keywords\n"," -import,from:used for importing modules\n"," -in,is:used for membership and identity checks\n"," -none: represents a null value.\n","  \n","  Examples are as follow-\n","  \n","\n","\n","\n","\n","\n"],"metadata":{"id":"MmFW9X4D7O-3"}},{"cell_type":"code","source":["def calculate_area(length,width):\n","  \"\"\"Calculate the area of a rectangle.\"\"\"\n","  area = length * width\n","  return area\n","\n","  if __name__ == \"__main__\":\n","    length = 5\n","    width = 3\n","    result = calculate_area(length, width)\n","    print(\"the area of the rectangle is:\",result)\n"],"metadata":{"id":"oRxd1mTH7yTP","executionInfo":{"status":"ok","timestamp":1728674195549,"user_tz":420,"elapsed":477,"user":{"displayName":"Sahil Kakde","userId":"00321140887664382239"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["4*5\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QA1FCmtK_y6y","executionInfo":{"status":"ok","timestamp":1728674405906,"user_tz":420,"elapsed":501,"user":{"displayName":"Sahil Kakde","userId":"00321140887664382239"}},"outputId":"138d2051-def0-44a6-fc6b-ed1a3cde0a16"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["20"]},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","source":["3 Compare and contrast mutable and immutable objects in python with examples."],"metadata":{"id":"OceGGki-GMFV"}},{"cell_type":"markdown","source":["\n","\n","1.   mutable objects-can be modified after their creation.\n","     examples = lists, dictionaries and sets.\n","2.   immutable objects- cannot be changed after they are created.\n","     examples = strings, tuples and frozen sets.\n","                \n"],"metadata":{"id":"AMkEneMWCiQs"}},{"cell_type":"code","source":["# Mutable object: List\n","my_list = [1, 2, 3]\n","my_list.append(4)  # Modifying the list\n","print(my_list)  # Output: [1, 2, 3, 4]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I-7NbEUuDP5d","executionInfo":{"status":"ok","timestamp":1728675024583,"user_tz":420,"elapsed":515,"user":{"displayName":"Sahil Kakde","userId":"00321140887664382239"}},"outputId":"499dde4f-e2bc-457d-a47c-272849ee6be3"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 2, 3, 4]\n"]}]},{"cell_type":"code","source":["# Immutable object: String\n","my_string = \"Hello\"\n","new_string = my_string.replace(\"H\", \"J\")  # Creating a new string\n","print(my_string)  # Output: Hello\n","print(new_string)  # Output: Jello"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sfrXO6sJD4Xn","executionInfo":{"status":"ok","timestamp":1728675052141,"user_tz":420,"elapsed":507,"user":{"displayName":"Sahil Kakde","userId":"00321140887664382239"}},"outputId":"8a0b5dfd-2898-4afc-8b16-cc862d31dfe0"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello\n","Jello\n"]}]},{"cell_type":"markdown","source":["4-discuss the different types of operations in python and provide examples of how they are used."],"metadata":{"id":"LhSF16yKFvQQ"}},{"cell_type":"markdown","source":["In Python, operations can be classified into several types based on their functionality. Hereâ€™s an overview of the main types of operations along with examples:\n","\n","*   Arithmetic Operations :\n","     These operations perform mathematical calculations.\n","\n","     Operators: +, -, , /, //, %, *\n","\n","\n"],"metadata":{"id":"jjhxLDRnG2Nc"}},{"cell_type":"code","source":["a = 10\n","b = 3\n","\n","addition = a + b       # 13\n","subtraction = a - b    # 7\n","multiplication = a * b  # 30\n","division = a / b        # 3.333...\n","floor_division = a // b # 3\n","modulus = a % b         # 1\n","exponentiation = a ** b # 1000"],"metadata":{"id":"lukaw8l0HqMb","executionInfo":{"status":"ok","timestamp":1728676039209,"user_tz":420,"elapsed":465,"user":{"displayName":"Sahil Kakde","userId":"00321140887664382239"}}},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":["Comparison Operations\n","These operations compare two values and return a boolean result (True or False).\n","\n","Operators: ==, !=, >, <, >=, <=\n","\n","Example:"],"metadata":{"id":"UjyOLeqrIGrV"}},{"cell_type":"code","source":["x = 5\n","y = 10\n","\n","equal = x == y          # False\n","not_equal = x != y      # True\n","greater_than = x > y    # False\n","less_than = x < y       # True\n","greater_equal = x >= y  # False\n","less_equal = x <= y     # True"],"metadata":{"id":"jXi_zoJjH3PT","executionInfo":{"status":"ok","timestamp":1728676190842,"user_tz":420,"elapsed":513,"user":{"displayName":"Sahil Kakde","userId":"00321140887664382239"}}},"execution_count":17,"outputs":[]},{"cell_type":"markdown","source":["Logical Operations\n","These operations combine boolean expressions.\n","\n","Operators: and, or, not\n","\n","Example:"],"metadata":{"id":"IPusBcIDI2gN"}},{"cell_type":"code","source":["a = True\n","b = False\n","\n","logical_and = a and b   # False\n","logical_or = a or b     # True\n","logical_not = not a      # False"],"metadata":{"id":"aRfZv63GIVWR","executionInfo":{"status":"ok","timestamp":1728676370109,"user_tz":420,"elapsed":600,"user":{"displayName":"Sahil Kakde","userId":"00321140887664382239"}}},"execution_count":18,"outputs":[]},{"cell_type":"markdown","source":["Bitwise Operations\n","These operations perform operations on bits.\n","\n","Operators: &, |, ^, ~, <<, >>\n","\n","Example:"],"metadata":{"id":"BnPIhDyZJCsN"}},{"cell_type":"code","source":["x = 5  # (binary: 0101)\n","y = 3  # (binary: 0011)\n","\n","bitwise_and = x & y     # 1 (binary: 0001)\n","bitwise_or = x | y      # 7 (binary: 0111)\n","bitwise_xor = x ^ y     # 6 (binary: 0110)\n","bitwise_not = ~x        # -6 (binary: ...11111010)\n","left_shift = x << 1     # 10 (binary: 1010)\n","right_shift = x >> 1    # 2 (binary: 0010)"],"metadata":{"id":"IYMazvViJBGN","executionInfo":{"status":"ok","timestamp":1728676412834,"user_tz":420,"elapsed":609,"user":{"displayName":"Sahil Kakde","userId":"00321140887664382239"}}},"execution_count":19,"outputs":[]},{"cell_type":"markdown","source":["Assignment Operations\n","These operations assign values to variables.\n","\n","Operators: =, +=, -=, *=, /=, etc.\n","\n","Example:"],"metadata":{"id":"in9elF__JMjS"}},{"cell_type":"code","source":["x = 10\n","x += 5  # x = x + 5, so x becomes 15\n","x *= 2  # x = x * 2, so x becomes 30"],"metadata":{"id":"XcUpc2mDJLid","executionInfo":{"status":"ok","timestamp":1728676445485,"user_tz":420,"elapsed":486,"user":{"displayName":"Sahil Kakde","userId":"00321140887664382239"}}},"execution_count":20,"outputs":[]},{"cell_type":"markdown","source":["Identity Operations\n","These operations check if two references point to the same object.\n","\n","Operators: is, is not\n","\n","Example:"],"metadata":{"id":"jDfqEWnIJZr0"}},{"cell_type":"code","source":["a = [1, 2, 3]\n","b = a\n","c = list(a)\n","\n","is_same = a is b       # True\n","is_not_same = a is c   # False"],"metadata":{"id":"yHK_veYEJTh9","executionInfo":{"status":"ok","timestamp":1728676495695,"user_tz":420,"elapsed":624,"user":{"displayName":"Sahil Kakde","userId":"00321140887664382239"}}},"execution_count":21,"outputs":[]},{"cell_type":"markdown","source":["5  Explain the concept of type casting in python with example"],"metadata":{"id":"goBBIF-TJj1w"}},{"cell_type":"markdown","source":["Type casting in Python refers to the conversion of one data type into another. this is helpfulwhen you want to perform operations that require compatible data types.\n","\n","\n","\n"],"metadata":{"id":"yH_CdirEkG2a"}},{"cell_type":"markdown","source":["Converting a string to an integer:"],"metadata":{"id":"Bm3lEuk7lqM3"}},{"cell_type":"code","source":["num_str = \"123\"\n","num_int = int(num_str)\n","print(num_int)  # Output: 123"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7p2eWjppkdhZ","executionInfo":{"status":"ok","timestamp":1728633586472,"user_tz":420,"elapsed":507,"user":{"displayName":"Sahil Kakde","userId":"00321140887664382239"}},"outputId":"5f007df0-d9fe-4024-c56b-eace4ebb93be"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["123\n"]}]},{"cell_type":"markdown","source":["Converting an integer to a float:"],"metadata":{"id":"rxin18n3l1vK"}},{"cell_type":"code","source":["num_int = 5\n","num_float = float(num_int)\n","print(num_float)  # Output: 5.0"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0IjN80vQlz4D","executionInfo":{"status":"ok","timestamp":1728633698276,"user_tz":420,"elapsed":634,"user":{"displayName":"Sahil Kakde","userId":"00321140887664382239"}},"outputId":"24e0df35-7326-4ef2-ad58-46e721f7889d"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["5.0\n"]}]},{"cell_type":"markdown","source":["Converting a float to a string:"],"metadata":{"id":"g0-yJ-u3mSl0"}},{"cell_type":"code","source":["num_float = 3.14\n","num_str = str(num_float)\n","print(num_str)  # Output: \"3.14\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wtIqsbPimPJs","executionInfo":{"status":"ok","timestamp":1728633753205,"user_tz":420,"elapsed":475,"user":{"displayName":"Sahil Kakde","userId":"00321140887664382239"}},"outputId":"9f553889-1f24-4ec5-a259-847db46ddc16"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["3.14\n"]}]},{"cell_type":"markdown","source":["Converting a list to a tuple:"],"metadata":{"id":"CJwsWLkAmgmn"}},{"cell_type":"code","source":["my_list = [1, 2, 3]\n","my_tuple = tuple(my_list)\n","print(my_tuple)  # Output: (1, 2, 3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j847YZUjmcm8","executionInfo":{"status":"ok","timestamp":1728633785145,"user_tz":420,"elapsed":499,"user":{"displayName":"Sahil Kakde","userId":"00321140887664382239"}},"outputId":"8710df91-3d25-48aa-dd33-5a9ed817e024"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["(1, 2, 3)\n"]}]},{"cell_type":"markdown","source":["6 How do conditional statements work in python? illustrate with examples."],"metadata":{"id":"hHmaM9l-mmJ1"}},{"cell_type":"markdown","source":[" Conditional statements in Python allow you to execute code based on certain conditions. The primary conditional statements are if, elif, and else. Here's how they work:\n",""],"metadata":{"id":"SOSdDNH6noWc"}},{"cell_type":"markdown","source":["Examples\n","Simple if statement:"],"metadata":{"id":"XnI6d7VcpFca"}},{"cell_type":"code","source":["age = 18\n","\n","if age >= 18:\n","    print(\"You are an adult.\")  # Output: You are an adult."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-6d9e8_nn74L","executionInfo":{"status":"ok","timestamp":1728634466214,"user_tz":420,"elapsed":776,"user":{"displayName":"Sahil Kakde","userId":"00321140887664382239"}},"outputId":"3bf463f0-7519-4bd5-98dc-95f9fc70fe8c"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["You are an adult.\n"]}]},{"cell_type":"markdown","source":["Using if and else:"],"metadata":{"id":"BXarAVFDpMTz"}},{"cell_type":"code","source":["age = 16\n","\n","if age >= 18:\n","    print(\"You are an adult.\")\n","else:\n","    print(\"You are a minor.\")  # Output: You are a minor."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gFrRx1_FpKlV","executionInfo":{"status":"ok","timestamp":1728634507811,"user_tz":420,"elapsed":657,"user":{"displayName":"Sahil Kakde","userId":"00321140887664382239"}},"outputId":"20bb0014-ab17-41fe-ee3b-58162c25b374"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["You are a minor.\n"]}]},{"cell_type":"markdown","source":["Using if, elif, and else:"],"metadata":{"id":"EN44cqLtpYrR"}},{"cell_type":"code","source":["score = 85\n","\n","if score >= 90:\n","    print(\"Grade: A\")\n","elif score >= 80:\n","    print(\"Grade: B\")  # Output: Grade: B\n","elif score >= 70:\n","    print(\"Grade: C\")\n","else:\n","    print(\"Grade: F\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CsEGCZyKpUxt","executionInfo":{"status":"ok","timestamp":1728634539149,"user_tz":420,"elapsed":628,"user":{"displayName":"Sahil Kakde","userId":"00321140887664382239"}},"outputId":"ed3e04ae-0375-4fc0-937f-d01bf7bd4230"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["Grade: B\n"]}]},{"cell_type":"markdown","source":[" multiple condition ,\n","\n"," You can also use logical operators like and, or, and not to combine conditions."],"metadata":{"id":"O1MkNR18pgnu"}},{"cell_type":"code","source":["temperature = 30\n","\n","if temperature > 25 and temperature < 35:\n","    print(\"It's a warm day.\")  # Output: It's a warm day.\n","else:\n","    print(\"It's not a warm day.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JBNHBNv8pcb6","executionInfo":{"status":"ok","timestamp":1728634606045,"user_tz":420,"elapsed":487,"user":{"displayName":"Sahil Kakde","userId":"00321140887664382239"}},"outputId":"be062893-9fa5-4a1e-ed23-1f407e2e3181"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["It's a warm day.\n"]}]},{"cell_type":"markdown","source":["Nested Conditional Statements,\n","\n","You can nest conditional statements to check multiple conditions in a hierarchy"],"metadata":{"id":"VbsZJAmdpyjx"}},{"cell_type":"code","source":["num = 10\n","\n","if num > 0:\n","    print(\"Positive number\")\n","    if num % 2 == 0:\n","        print(\"Even number\")  # Output: Even number\n","else:\n","    print(\"Non-positive number\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Esq7MsOwpsz8","executionInfo":{"status":"ok","timestamp":1728634654675,"user_tz":420,"elapsed":585,"user":{"displayName":"Sahil Kakde","userId":"00321140887664382239"}},"outputId":"982eef2e-f31c-4e71-832c-7356e7ed6cf8"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["Positive number\n","Even number\n"]}]},{"cell_type":"markdown","source":["7 describe the different types of loops in python and thier use cases with examples."],"metadata":{"id":"xOUnjzuhp63l"}},{"cell_type":"markdown","source":["In Python, there are several types of loops that allow you to iterate over sequences or execute a block of code multiple times. The two primary types are for loops and while loops. Hereâ€™s a breakdown of each, along with their use cases and examples:\n","\n","1. For Loops\n","Description: for loops are used to iterate over a sequence (like a list, tuple, string, or dictionary) or any iterable object.\n","\n","Use Cases:\n","\n","Iterating through a list of items.\n","Processing elements in a string.\n","Iterating over a range of numbers."],"metadata":{"id":"7UD_HxIXqNwM"}},{"cell_type":"code","source":["# Iterating through a list\n","fruits = ['apple', 'banana', 'cherry']\n","for fruit in fruits:\n","    print(fruit)\n","\n","# Using range to iterate\n","for i in range(5):\n","    print(i)  # Prints numbers from 0 to 4"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"94dMNXoip4lM","executionInfo":{"status":"ok","timestamp":1728635052568,"user_tz":420,"elapsed":767,"user":{"displayName":"Sahil Kakde","userId":"00321140887664382239"}},"outputId":"c0b0288d-2b78-46b9-9684-9204e7c87030"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["apple\n","banana\n","cherry\n","0\n","1\n","2\n","3\n","4\n"]}]},{"cell_type":"markdown","source":["While Loops\n","Description: while loops continue to execute a block of code as long as a specified condition is True.\n","\n","Use Cases:\n","\n","Repeatedly executing code until a certain condition changes.\n","Useful when the number of iterations is not known beforehand."],"metadata":{"id":"b7aC49Xjrbdv"}},{"cell_type":"code","source":["# Basic while loop\n","count = 0\n","while count < 5:\n","    print(count)\n","    count += 1  # Increments count by 1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GJ2Fe5DKrZs3","executionInfo":{"status":"ok","timestamp":1728635091152,"user_tz":420,"elapsed":547,"user":{"displayName":"Sahil Kakde","userId":"00321140887664382239"}},"outputId":"01ee0392-bf0a-410b-bcba-115ca0dc5275"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n","1\n","2\n","3\n","4\n"]}]},{"cell_type":"markdown","source":["Nested Loops\n","Description: You can have loops within loops (nested loops) to perform more complex iterations.\n","\n","Use Cases:\n","\n","Working with multi-dimensional data structures, like matrices.\n","Generating combinations of elements"],"metadata":{"id":"3Yhzb3cMrkV7"}},{"cell_type":"code","source":["# Nested for loop\n","for i in range(3):\n","    for j in range(2):\n","        print(f\"i: {i}, j: {j}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a8LN0dSgrjLh","executionInfo":{"status":"ok","timestamp":1728635125721,"user_tz":420,"elapsed":480,"user":{"displayName":"Sahil Kakde","userId":"00321140887664382239"}},"outputId":"58a5c172-ce53-40f5-d9eb-2f133374e085"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["i: 0, j: 0\n","i: 0, j: 1\n","i: 1, j: 0\n","i: 1, j: 1\n","i: 2, j: 0\n","i: 2, j: 1\n"]}]},{"cell_type":"markdown","source":["\n","Loop Control Statements\n","Python also provides control statements that can alter the flow of loops:\n","\n","break: Exits the loop prematurely.\n","continue: Skips the current iteration and moves to the next.\n","else: An optional block that executes after the loop completes normally (not via break)."],"metadata":{"id":"lSZx8BJ3rv76"}},{"cell_type":"code","source":["# Using break\n","for num in range(10):\n","    if num == 5:\n","        break  # Exit the loop when num is 5\n","    print(num)\n","\n","# Using continue\n","for num in range(5):\n","    if num % 2 == 0:\n","        continue  # Skip even numbers\n","    print(num)  # Only prints odd numbers\n","\n","# Using else\n","for num in range(5):\n","    print(num)\n","else:\n","    print(\"Loop completed without interruption\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nw82hhlXrrqb","executionInfo":{"status":"ok","timestamp":1728635166688,"user_tz":420,"elapsed":653,"user":{"displayName":"Sahil Kakde","userId":"00321140887664382239"}},"outputId":"e31f9ce6-c07b-4d05-8341-ac6ebf06dd81"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n","1\n","2\n","3\n","4\n","1\n","3\n","0\n","1\n","2\n","3\n","4\n","Loop completed without interruption\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"mNAnxab3r1pq"},"execution_count":null,"outputs":[]}]}